# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_builder', [dirname(__file__)])
        except ImportError:
            import _builder
            return _builder
        if fp is not None:
            try:
                _mod = imp.load_module('_builder', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _builder = swig_import_helper()
    del swig_import_helper
else:
    import _builder
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Builder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Builder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Builder, name)
    __repr__ = _swig_repr
    def CreateNotifyer(*args):
        """CreateNotifyer(char pluginName) -> GML::Utils::INotify"""
        return _builder.Builder_CreateNotifyer(*args)

    if _newclass:CreateNotifyer = staticmethod(CreateNotifyer)
    __swig_getmethods__["CreateNotifyer"] = lambda x: CreateNotifyer
    def CreateDataBase(*args):
        """CreateDataBase(char pluginName, GML::Utils::INotify notify) -> GML::DB::IDataBase"""
        return _builder.Builder_CreateDataBase(*args)

    if _newclass:CreateDataBase = staticmethod(CreateDataBase)
    __swig_getmethods__["CreateDataBase"] = lambda x: CreateDataBase
    def CreateConectors(*args):
        """CreateConectors(char conectorsList, GML::Utils::INotify notify, GML::DB::IDataBase database) -> GML::ML::IConector"""
        return _builder.Builder_CreateConectors(*args)

    if _newclass:CreateConectors = staticmethod(CreateConectors)
    __swig_getmethods__["CreateConectors"] = lambda x: CreateConectors
    def CreateAlgorithm(*args):
        """CreateAlgorithm(char algorithmLib) -> GML::Algorithm::IAlgorithm"""
        return _builder.Builder_CreateAlgorithm(*args)

    if _newclass:CreateAlgorithm = staticmethod(CreateAlgorithm)
    __swig_getmethods__["CreateAlgorithm"] = lambda x: CreateAlgorithm
    def GetAlgorithmList(*args):
        """GetAlgorithmList(char algorithmLib) -> char"""
        return _builder.Builder_GetAlgorithmList(*args)

    if _newclass:GetAlgorithmList = staticmethod(GetAlgorithmList)
    __swig_getmethods__["GetAlgorithmList"] = lambda x: GetAlgorithmList
    def __init__(self): 
        this = _builder.new_Builder()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _builder.delete_Builder
    __del__ = lambda self : None;
Builder_swigregister = _builder.Builder_swigregister
Builder_swigregister(Builder)

def Builder_CreateNotifyer(*args):
  """Builder_CreateNotifyer(char pluginName) -> GML::Utils::INotify"""
  return _builder.Builder_CreateNotifyer(*args)

def Builder_CreateDataBase(*args):
  """Builder_CreateDataBase(char pluginName, GML::Utils::INotify notify) -> GML::DB::IDataBase"""
  return _builder.Builder_CreateDataBase(*args)

def Builder_CreateConectors(*args):
  """Builder_CreateConectors(char conectorsList, GML::Utils::INotify notify, GML::DB::IDataBase database) -> GML::ML::IConector"""
  return _builder.Builder_CreateConectors(*args)

def Builder_CreateAlgorithm(*args):
  """Builder_CreateAlgorithm(char algorithmLib) -> GML::Algorithm::IAlgorithm"""
  return _builder.Builder_CreateAlgorithm(*args)

def Builder_GetAlgorithmList(*args):
  """Builder_GetAlgorithmList(char algorithmLib) -> char"""
  return _builder.Builder_GetAlgorithmList(*args)



