# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_attributelist', [dirname(__file__)])
        except ImportError:
            import _attributelist
            return _attributelist
        if fp is not None:
            try:
                _mod = imp.load_module('_attributelist', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _attributelist = swig_import_helper()
    del swig_import_helper
else:
    import _attributelist
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _attributelist.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _attributelist.SwigPyIterator_value(self)
    def incr(self, n = 1): return _attributelist.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _attributelist.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _attributelist.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _attributelist.SwigPyIterator_equal(self, *args)
    def copy(self): return _attributelist.SwigPyIterator_copy(self)
    def next(self): return _attributelist.SwigPyIterator_next(self)
    def __next__(self): return _attributelist.SwigPyIterator___next__(self)
    def previous(self): return _attributelist.SwigPyIterator_previous(self)
    def advance(self, *args): return _attributelist.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _attributelist.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _attributelist.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _attributelist.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _attributelist.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _attributelist.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _attributelist.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _attributelist.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class pymap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pymap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pymap, name)
    __repr__ = _swig_repr
    def iterator(self): return _attributelist.pymap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _attributelist.pymap___nonzero__(self)
    def __bool__(self): return _attributelist.pymap___bool__(self)
    def __len__(self): return _attributelist.pymap___len__(self)
    def __getitem__(self, *args): return _attributelist.pymap___getitem__(self, *args)
    def __delitem__(self, *args): return _attributelist.pymap___delitem__(self, *args)
    def has_key(self, *args): return _attributelist.pymap_has_key(self, *args)
    def keys(self): return _attributelist.pymap_keys(self)
    def values(self): return _attributelist.pymap_values(self)
    def items(self): return _attributelist.pymap_items(self)
    def __contains__(self, *args): return _attributelist.pymap___contains__(self, *args)
    def key_iterator(self): return _attributelist.pymap_key_iterator(self)
    def value_iterator(self): return _attributelist.pymap_value_iterator(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args): return _attributelist.pymap___setitem__(self, *args)
    def __init__(self, *args): 
        this = _attributelist.new_pymap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _attributelist.pymap_empty(self)
    def size(self): return _attributelist.pymap_size(self)
    def clear(self): return _attributelist.pymap_clear(self)
    def swap(self, *args): return _attributelist.pymap_swap(self, *args)
    def get_allocator(self): return _attributelist.pymap_get_allocator(self)
    def begin(self): return _attributelist.pymap_begin(self)
    def end(self): return _attributelist.pymap_end(self)
    def rbegin(self): return _attributelist.pymap_rbegin(self)
    def rend(self): return _attributelist.pymap_rend(self)
    def count(self, *args): return _attributelist.pymap_count(self, *args)
    def erase(self, *args): return _attributelist.pymap_erase(self, *args)
    def find(self, *args): return _attributelist.pymap_find(self, *args)
    def lower_bound(self, *args): return _attributelist.pymap_lower_bound(self, *args)
    def upper_bound(self, *args): return _attributelist.pymap_upper_bound(self, *args)
    __swig_destroy__ = _attributelist.delete_pymap
    __del__ = lambda self : None;
pymap_swigregister = _attributelist.pymap_swigregister
pymap_swigregister(pymap)

class Attribute(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Attribute, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Attribute, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Name"] = _attributelist.Attribute_Name_set
    __swig_getmethods__["Name"] = _attributelist.Attribute_Name_get
    if _newclass:Name = _swig_property(_attributelist.Attribute_Name_get, _attributelist.Attribute_Name_set)
    __swig_setmethods__["Description"] = _attributelist.Attribute_Description_set
    __swig_getmethods__["Description"] = _attributelist.Attribute_Description_get
    if _newclass:Description = _swig_property(_attributelist.Attribute_Description_get, _attributelist.Attribute_Description_set)
    __swig_setmethods__["Data"] = _attributelist.Attribute_Data_set
    __swig_getmethods__["Data"] = _attributelist.Attribute_Data_get
    if _newclass:Data = _swig_property(_attributelist.Attribute_Data_get, _attributelist.Attribute_Data_set)
    __swig_setmethods__["DataSize"] = _attributelist.Attribute_DataSize_set
    __swig_getmethods__["DataSize"] = _attributelist.Attribute_DataSize_get
    if _newclass:DataSize = _swig_property(_attributelist.Attribute_DataSize_get, _attributelist.Attribute_DataSize_set)
    __swig_setmethods__["AttributeType"] = _attributelist.Attribute_AttributeType_set
    __swig_getmethods__["AttributeType"] = _attributelist.Attribute_AttributeType_get
    if _newclass:AttributeType = _swig_property(_attributelist.Attribute_AttributeType_get, _attributelist.Attribute_AttributeType_set)
    __swig_setmethods__["ElementsCount"] = _attributelist.Attribute_ElementsCount_set
    __swig_getmethods__["ElementsCount"] = _attributelist.Attribute_ElementsCount_get
    if _newclass:ElementsCount = _swig_property(_attributelist.Attribute_ElementsCount_get, _attributelist.Attribute_ElementsCount_set)
    def __lt__(self, *args): return _attributelist.Attribute___lt__(self, *args)
    def __gt__(self, *args): return _attributelist.Attribute___gt__(self, *args)
    def __init__(self): 
        this = _attributelist.new_Attribute()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _attributelist.delete_Attribute
    __del__ = lambda self : None;
Attribute_swigregister = _attributelist.Attribute_swigregister
Attribute_swigregister(Attribute)

class AttributeList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttributeList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttributeList, name)
    __repr__ = _swig_repr
    BOOLEAN = _attributelist.AttributeList_BOOLEAN
    INT8 = _attributelist.AttributeList_INT8
    INT16 = _attributelist.AttributeList_INT16
    INT32 = _attributelist.AttributeList_INT32
    INT64 = _attributelist.AttributeList_INT64
    UINT8 = _attributelist.AttributeList_UINT8
    UINT16 = _attributelist.AttributeList_UINT16
    UINT32 = _attributelist.AttributeList_UINT32
    UINT64 = _attributelist.AttributeList_UINT64
    FLOAT = _attributelist.AttributeList_FLOAT
    DOUBLE = _attributelist.AttributeList_DOUBLE
    STRING = _attributelist.AttributeList_STRING
    ATTRIBUTES_COUNT = _attributelist.AttributeList_ATTRIBUTES_COUNT
    def __init__(self): 
        """__init__(self) -> AttributeList"""
        this = _attributelist.new_AttributeList()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _attributelist.delete_AttributeList
    __del__ = lambda self : None;
    def AddAttribute(self, *args):
        """
        AddAttribute(self, char Name, void Data, unsigned int AttributeType, unsigned int ElementsCount = 1, 
            char Description = None) -> bool
        AddAttribute(self, char Name, void Data, unsigned int AttributeType, unsigned int ElementsCount = 1) -> bool
        AddAttribute(self, char Name, void Data, unsigned int AttributeType) -> bool
        """
        return _attributelist.AttributeList_AddAttribute(self, *args)

    def AddString(self, *args):
        """
        AddString(self, char Name, char Text, char Description = None) -> bool
        AddString(self, char Name, char Text) -> bool
        """
        return _attributelist.AttributeList_AddString(self, *args)

    def AddBool(self, *args):
        """
        AddBool(self, char Name, bool value, char Description = None) -> bool
        AddBool(self, char Name, bool value) -> bool
        """
        return _attributelist.AttributeList_AddBool(self, *args)

    def AddDouble(self, *args):
        """
        AddDouble(self, char Name, double value, char Description = None) -> bool
        AddDouble(self, char Name, double value) -> bool
        """
        return _attributelist.AttributeList_AddDouble(self, *args)

    def AddInt32(self, *args):
        """AddInt32(self, char Name, int value, char Description) -> bool"""
        return _attributelist.AttributeList_AddInt32(self, *args)

    def Update(self, *args):
        """Update(self, char Name, void Data, UInt32 DataSize) -> bool"""
        return _attributelist.AttributeList_Update(self, *args)

    def Clear(self):
        """Clear(self)"""
        return _attributelist.AttributeList_Clear(self)

    def Get(self, *args):
        """
        Get(self, unsigned int index) -> Attribute
        Get(self, char Name) -> Attribute
        """
        return _attributelist.AttributeList_Get(self, *args)

    def GetCount(self):
        """GetCount(self) -> unsigned int"""
        return _attributelist.AttributeList_GetCount(self)

    def Save(self, *args):
        """Save(self, char fileName) -> bool"""
        return _attributelist.AttributeList_Save(self, *args)

    def Load(self, *args):
        """Load(self, char fileName) -> bool"""
        return _attributelist.AttributeList_Load(self, *args)

    def Create(self, *args):
        """
        Create(self, char text, char separator = ';') -> bool
        Create(self, char text) -> bool
        """
        return _attributelist.AttributeList_Create(self, *args)

    def Set(self, *args):
        """Set(self, pymap v) -> bool"""
        return _attributelist.AttributeList_Set(self, *args)

AttributeList_swigregister = _attributelist.AttributeList_swigregister
AttributeList_swigregister(AttributeList)



